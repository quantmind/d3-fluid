import express from 'express';
import {join} from 'path';
import {existsSync, readFileSync} from 'fs';
import {JSDOM} from 'jsdom';
import {viewSlugify} from 'd3-view';

import logger from '../utils/logger';
import extractMetadata from '../utils/meta';

//
//  Serve markdown pages matching a pattern


export default function (app, siteConfig) {
    if (!siteConfig.markdown) return;
    const
        plugins = siteConfig.markdown.plugins,
        paths = siteConfig.markdown.paths || [];

    paths.forEach(cfg => {
        const slug = cfg.slug || '';
        app.use(`/${slug}`, markdown(cfg, plugins, siteConfig));
    });

}


function docTemplate (ctx) {
    const css = ctx.stylesheets.map(stylesheet => {
        return `<link href="${stylesheet}" media="all" rel="stylesheet" />`;
    }).join('\n');
    const scripts = ctx.scripts.map(script => {
        return `<script src="${script}"></script>`;
    }).join('\n');

    return (`
        <!DOCTYPE html>
        <html>
        <head data-meta='${ctx.metadata}'>
            <title>${ctx.title}</title>
            <meta charset="utf-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            ${css}
        </head>
        <body>
            <div id="root">
                <markdown>${ctx.content}</markdown>
            </div>
            ${scripts}
        </body>
        </html>
    `);
}


function renderDoc (ctx) {
    ctx.metadata = JSON.stringify(ctx.metadata);
    const dom = new JSDOM(
        docTemplate(ctx),
        {runScripts: "dangerously"}
    );
    return dom.serialize();
}


function markdown (cfg, plugins, siteConfig) {

    const app = express();

    app.get('/', (req, res, next) => {
        tryFile('index', res, next);
    });

    app.get('/:name', (req, res, next) => {
        tryFile(req.params.name, res, next);
    });

    return app;

    function tryFile (name, res, next) {
        let file = join(siteConfig.PATH, cfg.path + name);
        logger.debug(`try loading from "${file}"`);

        if (!existsSync(file)) {
            file = `${file}.md`;
            if (!existsSync(file)) {
                next();
                return;
            }
        }

        const ctx = Object.assign(
            {}, siteConfig, extractMetadata(readFileSync(file, 'utf8'))
        );

        // generate table of contents if appropriate
        if (ctx.content && ctx.content.indexOf(TABLE_OF_CONTENTS_TOKEN) !== -1) {
            ctx.content = insertTableOfContents(ctx.content);
        }

        return res.send(renderDoc(ctx));
    }
}


const TABLE_OF_CONTENTS_TOKEN = '<AUTOGENERATED_TABLE_OF_CONTENTS>';


function insertTableOfContents (rawContent) {
    const regexp = /\n###\s+(`.*`.*)\n/g;
    let match;
    const headers = [];
    while ((match = regexp.exec(rawContent))) {
        headers.push(match[1]);
    }

    const tableOfContents = headers
      .map(header => `  - [${header}](#${viewSlugify(header)})`)
      .join('\n');

    return rawContent.replace(TABLE_OF_CONTENTS_TOKEN, tableOfContents);
}
